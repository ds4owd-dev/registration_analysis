---
title: "Data Analysis"
format: html
editor: visual
---

This document contains a descriptive and exploratory analysis of the data collected for the [Data Science for Open WASH data course](https://ds4owd-002.github.io/website/) registration form. 

```{r}
#| label: setup
#| include: false

# Set global options
knitr::opts_chunk$set(
  echo = FALSE,
  warning = FALSE,
  message = FALSE
)

# Load required libraries
library(tidyverse)
library(robotoolbox)
library(readxl)
library(labelled)

# Define OWD color palette
owd_palette <- c("#5b195b", "#9b2c60", "#ce525b",
                 "#f08453", "#ffbd54", "#f9f871")
```


```{r}
#| label: load-data

form_id <- "ashaEDvw4ZLwGi9bqXGeqb"
form_file <- "registration_form.xlsx"

# fetch data from Kobo with robotoolbox
raw_data <- kobo_data(x = form_id,
                      all_versions = TRUE)

# read in questionnaire and labels from XLS form 
questionnaire <- read_xlsx(form_file,
                           sheet = "survey")

label_dict <- read_xlsx("registration_form.xlsx",
                        sheet = "choices")
```

```{r}
#| label: data-processing

registration_data <- raw_data |> 
  select(github_username,
         gender,
         age_group,
         country_residence,
         education,
         employment_situation,
         org_type,
         prog_general,
         prog_r,
         prog_python,
         starts_with("llm_platforms")) |> 
  distinct(github_username, .keep_all = TRUE)

# starts_with("llm_") & !starts_with("llm_platforms")
```

## Categorical Variables Distribution

### Gender

```{r}
#| label: plot-gender

# Get gender labels
gender_labels <- label_dict |> 
  filter(list_name == "list_gender") |> 
  select(name, label)

registration_data |> 
  count(gender) |> 
  left_join(gender_labels, by = c("gender" = "name")) |> 
  mutate(gender_label = coalesce(label, gender)) |> 
  ggplot(aes(x = reorder(gender_label, n), y = n)) +
  geom_col(fill = owd_palette[1]) +
  coord_flip() +
  labs(x = "Gender", y = "Count") +
  theme_minimal()
```

### Age group

```{r}
#| label: plot-age

# Get age group labels
age_labels <- label_dict |> 
  filter(list_name == "list_age_group") |> 
  select(name, label)

registration_data |> 
  count(age_group) |> 
  left_join(age_labels, by = c("age_group" = "name")) |> 
  mutate(age_label = coalesce(label, age_group)) |> 
  ggplot(aes(x = reorder(age_label, n), y = n)) +
  geom_col(fill = owd_palette[2]) +
  coord_flip() +
  labs(x = "Age Group", y = "Count") +
  theme_minimal()
```

### Country of residence

```{r}
#| label: plot-country

# Get country labels
country_labels <- label_dict |> 
  filter(list_name == "countries") |> 
  select(name, label)

registration_data |> 
  count(country_residence) |> 
  left_join(country_labels, by = c("country_residence" = "name")) |> 
  mutate(country_name = coalesce(label, country_residence),
         rank = min_rank(desc(n))) |> 
  filter(rank <= 10) |>  # Show top 10 countries with ties
  ggplot(aes(x = reorder(country_name, n), y = n)) +
  geom_col(fill = owd_palette[3]) +
  coord_flip() +
  labs(x = "Country", y = "Count", 
       title = "Top 10 Countries") +
  theme_minimal()
```

### Education level

```{r}
#| label: plot-education

# Get education labels and remove text in parentheses
education_labels <- label_dict |> 
  filter(list_name == "education_level") |> 
  select(name, label) |> 
  mutate(label = str_remove(label, "\\s*\\(.*\\)"))

registration_data |> 
  count(education) |> 
  left_join(education_labels, by = c("education" = "name")) |> 
  mutate(education_label = coalesce(label, education)) |> 
  ggplot(aes(x = reorder(education_label, n), y = n)) +
  geom_col(fill = owd_palette[4]) +
  coord_flip() +
  labs(x = "Education Level", y = "Count") +
  theme_minimal()
```

### Employment situation

```{r}
#| label: plot-employment

# Get employment situation labels
employment_labels <- label_dict |> 
  filter(list_name == "employment_status") |> 
  select(name, label)

registration_data |> 
  count(employment_situation) |> 
  left_join(employment_labels, by = c("employment_situation" = "name")) |> 
  mutate(employment_label = coalesce(label, employment_situation)) |> 
  ggplot(aes(x = reorder(employment_label, n), y = n)) +
  geom_col(fill = owd_palette[5]) +
  coord_flip() +
  labs(x = "Employment Situation", y = "Count") +
  theme_minimal()
```

### Organization type

```{r}
#| label: plot-org-type

# Get organization type labels
org_labels <- label_dict |> 
  filter(list_name == "organisation_type") |> 
  select(name, label)

registration_data |> 
  count(org_type) |> 
  left_join(org_labels, by = c("org_type" = "name")) |> 
  mutate(org_label = coalesce(label, org_type)) |> 
  ggplot(aes(x = reorder(org_label, n), y = n)) +
  geom_col(fill = owd_palette[6]) +
  coord_flip() +
  labs(x = "Organization Type", y = "Count") +
  theme_minimal()
```

### Programming skills

```{r}
#| label: plot-programming-skills
#| fig-height: 6

# Get programming level labels
prog_labels <- label_dict |> 
  filter(list_name == "programming_exp") |> 
  select(name, label)

# Combine programming experience variables
prog_data <- registration_data |> 
  select(prog_general, prog_r, prog_python) |> 
  pivot_longer(everything(), 
               names_to = "skill_type", 
               values_to = "level") |> 
  left_join(prog_labels, by = c("level" = "name")) |> 
  mutate(level_label = coalesce(label, level),
         skill_type = case_when(
           skill_type == "prog_general" ~ "General Programming",
           skill_type == "prog_r" ~ "R Programming",
           skill_type == "prog_python" ~ "Python Programming"
         ))

prog_data |> 
  count(skill_type, level_label) |> 
  ggplot(aes(x = reorder(level_label, n), y = n, fill = skill_type)) +
  geom_col(position = "dodge") +
  coord_flip() +
  labs(x = "Experience Level", y = "Count", fill = "Skill Type") +
  theme_minimal() +
  scale_fill_manual(values = owd_palette[1:3])
```

### LLM usage

```{r}
#| label: plot-llm-platforms
#| fig-height: 6

# Process LLM platforms data - convert all to character first
llm_platforms_data <- registration_data |> 
  select(starts_with("llm_platforms")) |> 
  mutate(across(everything(), as.character)) |> 
  mutate(id = row_number()) |> 
  pivot_longer(-id, 
               names_to = "platform_var", 
               values_to = "platform") |> 
  filter(!is.na(platform) & platform != "NA") |> 
  separate_rows(platform, sep = " ") |> 
  filter(platform != "" & platform != "0" & platform != "1")

# Get platform labels if available
platform_labels <- label_dict |> 
  filter(list_name == "llm_tools") |> 
  select(name, label)

# Count and plot platform usage - top 10 with ties
llm_platforms_data |> 
  count(platform) |> 
  left_join(platform_labels, by = c("platform" = "name")) |> 
  mutate(platform_label = coalesce(label, platform),
         rank = min_rank(desc(n))) |> 
  filter(rank <= 10) |>  # This will include ties at rank 10
  ggplot(aes(x = reorder(platform_label, n), y = n)) +
  geom_col(fill = owd_palette[2]) +
  coord_flip() +
  labs(x = "LLM Platform", y = "Number of Users",
       title = "Top 10 LLM Platforms Used by Participants") +
  theme_minimal()
```

